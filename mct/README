Compiling mct
-------------

To be able to compile and use the mct programs you will need to have
a working copy of the hudson_ms stuff 
(http://svn.math.canterbury.ac.nz/repos/lce/trunk/hudson_ms/)

and will need to have compiled the code in the hudson_ms_lib sub-directory
(code in test should also compile, but don't worry about compiler errors 
from gui - that's under development and may well be broken from time to time).

hudson_ms contains my c++ version of ms which compiles to a 
mscplusplus shared library (libmscplusplus).  mct uses mscplusplus
to create its args.

Because it is all still under development, this library is not actually 
installed so mct needs to link to the hudson_ms sub-directories.  
The easiest way to do this is by using a custom configuration script (.sh file)
to call configure with the appropriate options to give the -I and -L flags
mct the location of headers and library for the hudson_ms stuff.  

In the svn files there is a file called custom_config.sh that you can
edit to make your own configure script.  Please DO NOT alter custom_config.sh
itself because it is part of the repository and any change will continually
commited when you commit and brought in by others when then update, causing
no end of conflicts/overwrites/tears and recriminations.

So: 
(1) EDIT custom_config.sh to uncomment the directory location line
and edit this to match your path for the for hudson_ms_lib within your
working copy of hudson_ms.

(2) SAVE AS some other .sh filename (eg maybe 'custom_conf.sh')
and use this 'personal' version of the script for configuration.

(3) You may have to change permissions so that you can execute the script:
do this with 
	chmod 755 script.sh 
substituting your script file name for 'script.sh',
or use a gui file manager to change the permissions.

Doing this will ensure that the svn'd version of custom_config.sh 
is not changed separately by everyone!


To configure, run bootstrap (./bootstrap) to create the configure
script

and then run ./custom_conf.sh (substituting whatever your personal
custom configure file name is if not 'custom_conf.sh') to actually
create the Makefiles.  Run make from the top (build) directory
or from /src or from /testing, etc to make different parts
separately.  

You will need to keep your working copy of hudson_ms up to date as far
as the stuff in there that mct uses is concerned, but I'll 
let you know whenever there are changes that affect mct.


Doxygen documentation for mct
-----------------------------

I have put the doxygen source for the main pages and general subpages
in the top level mct directory (see mct/docu.h).  (As before, the actual
docs are put into the mct/doc directory - it's just the location of
the docu file that I have changed).  I am working on the general source
documentation in docu.h to better describe the shape of the package 
now, which is much more about general sampling and aabc than the 
Markov Chains on Trees stuff that formed most of that file before.  

I have added several sections with the \internal markup.  These
are things I want to put on record but for internal purposes only.
These comments will only come out in the documentation generated by
doxygen if the INTERNAL_DOCS configuration option in the 
configuration file (for us this is Doxyfile) is set to YES.
In Doxyfile itself INTERNAL_DOCS = NO and it is best to leave it like that.
What I have been doing is to use my own version of the configuration 
file, with INTERNAL_DOCS = YES and also with various dot graph options
turned off (this makes it much quicker to generate the documentation
and easier to look at it and just check the actual words).  

I have added two files to the repository (in the top level mct directory)
to help with this.  One is a script dox.sh that uses sed to create 
the adapted version of the doxygen configuration file and then 
invokes doxygen giving it this configuration file to use.  The other is 
a file of sed commands called sed_cmd_file that specifies the 
substitutions to use to convert Doxyfile to the adapted version.  If you
run ./dox.sh (from the top level mct directory) you will get an 
'internal' and less bloated version of the docs.


The structure for mct
--------------------- 
I have altered the way that the main mct code builds so that it builds
a static library mct (libmct.a).  

I have altered the directory structure for mct to separate out the 
library-related code and the code to use that library for testing and
actual runs.  The directory structure is now

mct*
| 
---src*
|   |
|   --- mct
|   --- aabc
|   --- reg
|
---testing*
---runs*

directory names with a * beside them have 'do-something' Makefile.am's.
ie you can call make from these directories (once its all configured). 

The top_srcdir is the top mct.  That is where bootstrap, configure.ac, 
custom_conf.sh etc are.   The Makefile.am there is recursive, referring
to the src, testing and runs directories each of which has their own 
Makefile.am.

mct/src and libmct.a
--------------------

mct/src is effectively the top level directory for the mct library stuff.
Because there are so many files I have separated them by namespace.  The 
Makefile.am however just refers to the files with the relative path from 
src so that the sub-directory structure is just a convenience for 
organising the files and does not represent separate compilation units.

(Technical note - the .o object files are also put into the sub-directories
just to keep src a bit cleaner - that's the 
AUTOMAKE_OPTIONS = subdir-objects option in src/Makefile.am - this should
not matter as far as building it all is concerned but does mean that 
I have added a line to the top level configure.ac file that makes 
a SRC_SUBS_INCLUDES variable that we can refer to in the various 
Makefile.am's to ensure that these sub-directories are in the 
include path - otherwise the compiler will complain that it can't find
header files specified with #include in the .cpp files.  All this 
should now work properly and the user need not be aware of it ...)   

Compiling in mct/src should create the libmct.a static library.

This library is used in compiling in mct/testing and mct/runs.  Any 
changes in the library code will have to be recompiled into a new
libmct.a before they can be used by programs in mct/testing and mct/runs.
The top-level Makefile.am in the top_srcdir mct will run make in the 
mct/src first so that the library is always recompiled before other
subdirectories if make is initiated from the top-level mct 
directory.  


mct/testing
-----------

mct/testing contains my tests that various parts of the library are 
working.  I'd prefer it if no changes are made to these files unless
necessitated by changes in the src code!  It is 
however the natural place to add tests for new src files.

All of the mct/testing programs use the libmct.a, so 
the Makefile.am specifies LDADD = ${top_builddir}/src/libmct.a to 
specify that the linker should use this library for all programs 
built from that Makefile.  Not all of them use the mscplusplus library
libmscplusplus.a so this is given as an program-specific linker 
addition using prog_LDADD (where prog is the program name).  Using
prog_LDADD effectively overrides the general LDADD so I put this 
into the prog_LDADD lines, and I put it first because otherwise there
are linking errors.  

mct/runs
--------

mct/runs contains the files I have actually used to run stuff rather
than just testing that it works.  I have added quite a lot to the internal
comments - see particularly runSample_Simdata.cpp, runSample_Polysites.cpp,
runSample_Microsat.cpp, runAABC_Simdata.cpp, runAABC_Polysites.cpp,
runAABC_Microsat.cpp.  If you look at them in this order they should
build up a reasonable picture of what is necessary.  

I have put the creation of most of the hudson_ms::PopulationStructures 
used by the other programs in a separate file (see make_run_pops.cpp and .hpp)
because this means that the same populations can be easily used by more
than one program.

Obviously a lot of what these programs are doing should be all made easy
for some final user by being put into modules which give a nice easy 
interface for them to use rather than having
to write their own program from scratch.  Equally obviously, at present
they are repeating a lot of code etc.  However, I have not done this yet
because it still is not clear to me what we want to use mct for and how
and it is not worth writing lots of things that will have to be continually
changed and scrapped and remade...

As with mct/testing programs, the mct/runs programs all use
the libmct.a, so the Makefile.am specifies 
LDADD = ${top_builddir}/src/libmct.a.  At the time I am writing this
all the programs also use the mscplusplus library (in relation to the
hudson_ms::PopulationStructures to pass to their samplers) but
it might well be that we have runs that do not use that library, so
I have again made this a program-specific addition using prog_LDADD.




